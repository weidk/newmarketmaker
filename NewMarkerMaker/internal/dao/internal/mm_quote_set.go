// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// MMQUOTESETDao is the data access object for table MM_QUOTE_SET.
type MMQUOTESETDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns MMQUOTESETColumns // columns contains all the column names of Table for convenient usage.
}

// MMQUOTESETColumns defines and stores column names for table MM_QUOTE_SET.
type MMQUOTESETColumns struct {
	BONDCODE       string //
	BASEYIELD      string //
	MIDYIELDADD    string //
	MIDYIELDSUB    string //
	BESTYIELDADD   string //
	BESTYIELDSUB   string //
	BESTYIELDTYPE  string //
	SETYIELDBUY    string //
	SETYIELDSELL   string //
	BESTBID        string //
	SECONDBID      string //
	BESTOFR        string //
	SECONDOFR      string //
	SELFBID        string //
	SELFOFR        string //
	BESTMIDYIELD   string //
	SECONDMIDYIELD string //
	SETTLETYPE     string //
	BUYQTY         string //
	SELLQTY        string //
	MAXFLOOR       string //
	CANSEND        string //
}

// mMQUOTESETColumns holds the columns for table MM_QUOTE_SET.
var mMQUOTESETColumns = MMQUOTESETColumns{
	BONDCODE:       "BONDCODE",
	BASEYIELD:      "BASEYIELD",
	MIDYIELDADD:    "MIDYIELD_ADD",
	MIDYIELDSUB:    "MIDYIELD_SUB",
	BESTYIELDADD:   "BESTYIELD_ADD",
	BESTYIELDSUB:   "BESTYIELD_SUB",
	BESTYIELDTYPE:  "BESTYIELD_TYPE",
	SETYIELDBUY:    "SETYIELD_BUY",
	SETYIELDSELL:   "SETYIELD_SELL",
	BESTBID:        "BEST_BID",
	SECONDBID:      "SECOND_BID",
	BESTOFR:        "BEST_OFR",
	SECONDOFR:      "SECOND_OFR",
	SELFBID:        "SELF_BID",
	SELFOFR:        "SELF_OFR",
	BESTMIDYIELD:   "BEST_MIDYIELD",
	SECONDMIDYIELD: "SECOND_MIDYIELD",
	SETTLETYPE:     "SETTLETYPE",
	BUYQTY:         "BUYQTY",
	SELLQTY:        "SELLQTY",
	MAXFLOOR:       "MAXFLOOR",
	CANSEND:        "CANSEND",
}

// NewMMQUOTESETDao creates and returns a new DAO object for table data access.
func NewMMQUOTESETDao() *MMQUOTESETDao {
	return &MMQUOTESETDao{
		group:   "default",
		table:   "MM_QUOTE_SET",
		columns: mMQUOTESETColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *MMQUOTESETDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *MMQUOTESETDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *MMQUOTESETDao) Columns() MMQUOTESETColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *MMQUOTESETDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *MMQUOTESETDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *MMQUOTESETDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
